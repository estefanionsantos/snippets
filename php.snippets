#
# php opening tag
snippet <?
	<?php ${1}

#
# php opening tag
snippet phpo
	<?php ${1}

#
# <?php ?>	
snippet php
	<?php ${1} ?>
#
# <?php ?>	
snippet phpp
	<?php
		
	    ${1}

	?>
#
# php opening tag
snippet phpoo
	<?php
	
	${1}

#
# php opening tag
snippet <??
	<?php
	
	${1}

#
# clone ?>
snippet phpc
	${1} ?>
#
# clone ?>
snippet phpcc
	${1}
	
	?>
#
# <?php echo ?>	
snippet phpe
	<?php echo ${1}; ?>
#
# <?php 
#      echo
# ?>	
snippet phpee
	<?php
		
	    echo ${1};
		
	?>
#
# echo  
snippet e
	echo ${1};
#
# 
snippet print_r
	print_r(${1:$array});
#
#
snippet var_dump
	var_dump(${1:var});
#
# retorna print_r()
snippet pr
	echo '<pre>';
	print_r(${1:$array});
	echo '</pre>';
#
# retorna var_dump()
snippet vd
	echo '<pre>';
	var_dump(${1});
	echo '</pre>';
#
# retorna print_r()
snippet epr
	echo '<pre>';
	print_r(${1:$array});
	echo '</pre>';
	exit();
#
# retorna var_dump()
snippet evd
	echo '<pre>';
	var_dump(${1});
	echo '</pre>';
	exit();
#
#
snippet debug print_r()
	echo '<pre>';
	print_r(${1:$array});
	echo '</pre>';
#
#
snippet debug var_dump()	
	echo '<pre>';
	var_dump(${1});
	echo '</pre>';
#
#
snippet ve
	var_export(${1}, ${2:true})
#
#
snippet ve;
	var_export(${1}, ${2:true});
#
# error_reporting()	
snippet err_reporting
		ini_set('display_errors', 1);
		ini_set('display_startup_erros', 1);
		ini_set('error_reporting', E_ALL);

#
# error_reporting()	
snippet err
		ini_set('display_errors', 1);
		ini_set('display_startup_erros', 1);
		ini_set('error_reporting', E_ALL);
#
# error_reporting(0)	
snippet err0
		ini_set('display_errors', 0);
		ini_set('display_startup_erros', 0);
		ini_set('error_reporting', 0);
#
## try{...}catch(...){..}
snippet try
	try {
		${1}
	} catch (${2:\}${3:Exception $e}) {
		throw new ${2}${4:Exception}(${5:$e});
	}
#
### throw new Exceptio(...)
snippet throw
	throw new ${1:Exception}(${2});
## try{...}catch(...){..}
snippet conn
	try {
		$dsn      = 'mysql:host=${1:127.0.0.1};dbname=${2:db_name}';
		$user     = '${3:user}';
		$password = '${4:password}';
		$options  = NULL;

		$conn = new PDO($dsn, $user, $password, $options);
		$conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );

	} catch (PDOException $e) {
		throw new Exception($e->getMessage());
	}


#---------------------------------------- 
# MODIFIED SNIPPETS
#---------------------------------------- 
	
####
snippet class 
	class ${1:`Filename()`}
	{
		${2}
	}	
#
snippet class:e
	class ${1:`Filename()`} extends ${2:ExtendClass}
	{
				${3}
	}
#
snippet class:ei
	class ${1:`Filename()`} extends ${2:ExtendClass} implements ${3:InterfaceClass}
	{
		${4}
	}
#
snippet class:i
	class ${1:`Filename()`} implements ${2:InterfaceClass}
	{
		${3}
	}
# 
snippet iclass
	interface ${1:`Filename()`}
	{
		${2}
	}
#
snippet aclass
	abstract class ${1:`Filename()`}
	{
		${2}
	}
#
snippet aclass:e
	abstract class ${1:`Filename()`} extends ${2:ExtendClass}
	{
		${2}
	}
#
snippet aclass:i
	abstract class ${1:`Filename()`} implements ${2:InterfaceClass}
	{
		${2}
	}
#
snippet aclass:ei
	abstract class ${1:`Filename()`} extends ${2:ExtendClass} implements ${3:InterfaceClass}
	{
		${2}
	}
# Interface
snippet interface
	interface ${1:`Filename()`}
	{
		${2}
	}
# 
snippet class_  MyClass
	class ${1:`Filename()`}
	{
		${2}
	}	
#
snippet class_ MyClass|ExtendClass
	class ${1:`Filename()`} extends ${2:ExtendClass}
	{
				${3}
	}
#
snippet class_ MyClass|ExtendClass
	class ${1:`Filename()`} extends ${2:ExtendClass} implements ${3:InterfaceClass}
	{
		${4}
	}
#
snippet class_ MyClass|InterfaceClass
	class ${1:`Filename()`} implements ${2:InterfaceClass}
	{
		${3}
	}
# 
snippet class_ InterfaceClass
	interface ${1:`Filename()`}
	{
		${2}
	}
#
snippet class_ AbstractClass
	abstract class ${1:`Filename()`}
	{
		${2}
	}
#
snippet class_ AbstractClass|ExtendClass
	abstract class ${1:`Filename()`} extends ${2:ExtendClass}
	{
		${2}
	}
#
snippet aclassi AbstractClass|InterfaceClass
	abstract class ${1:`Filename()`} implements ${2:InterfaceClass}
	{
		${2}
	}
#
snippet class_ AbstractClass|ExtendsClass|InterfaceClass 

	abstract class ${1:`Filename()`} extends ${2:ExtendClass} implements ${3:InterfaceClass}
	{
		${2}
	}
#
snippet minsert
	public function insert(ClassEntity $c): bool
	{
	    $sql = 'INSERT INTO t1 (c1, c2) VALUES (:c1, :c2)';
	    $stmt = $this->pdo->prepare($sql);
	    $stmt->bindValue(':c1', $c->getC1());
	    $stmt->bindValue(':c2', $c->getC2());

	    $result = $stmt->execute();
	    $id = (int) $this->pdo->lastInsertId();

	    $c->setId($id);

	    return $result;
	}
snippet mupdate
	public function update(ClassEntity $c): bool
	{
	    $sql = "UPDATE t1 SET v1 = :c1, v2 = :c2 WHERE id = :id; ";

	    $stmt = $this->pdo->prepare($sql);
	    $stmt->bindValue(':c1', $c->getUrl());
	    $stmt->bindValue(':c2', $c->getTitle());
	    $stmt->bindValue(':id', $c->getId(), \PDO::PARAM_INT);

	    return $stmt->execute();
	}
snippet mgetid
	public function getById(int $id)
	{
	    $stmt = $this->pdo->prepare('SELECT * FROM t1 WHERE id=:id');
	    $stmt->bindValue(':id', $id, \PDO::PARAM_INT);
	    $stmt->execute();
	    $stmt->setFetchMode(PDO::FETCH_CLASS, 'MyApp\Entity\ClassEntity');

	    return $stmt->fetch();
	}
snippet mgetall
	public function getAll($limit=10, $offset = 0): array
	{
	    $sql = 'SELECT * FROM t1 ORDER BY id DESC LIMIT :limit OFFSET :offset';

	    $stmt = $this->pdo->prepare($sql);
	    $stmt->bindValue(':limit', $limit, \PDO::PARAM_INT);
	    $stmt->bindValue(':offset', $offset, \PDO::PARAM_INT);
	    $stmt->execute();

	    return $stmt->fetchAll(PDO::FETCH_CLASS, 'MyApp\Entity\ClassEntity');
	}
snippet mdelete
	public function delete(int $id): bool
	{
	    $sql = 'DELETE FROM t1 WHERE id = :id';

	    $stmt = $this->pdo->prepare($sql);
	    $stmt->bindValue(':id', $id, \PDO::PARAM_INT);

	    return $stmt->execute();
	}
# doc header
snippet doc_h
	/**
	 *
	 * ${1}
	 *
	 * @author      ${2:`g:snips_author`}
	 * @copyright   Copyright (c) ${3:`strftime('%Y')`}
	 *
	 */
#
# function 
snippet function_ NORMAL: function nameFunction(){...}
	function ${1}(${2})
	{

		${3:#...}

	}

#
# function anonymous
snippet function_ ANONYMOUS: function(){...}
	function (${1}) {

		${2:#...}

	}
#
#
# variavel function anonymous inherit
snippet function_ ANONYMOUS USE: function() use($inherit){...}


	function (${2}) use (${3:inherit}) {

		${4:#...}

	}
#
# function anonymous
snippet function_ ANONYMOUS VAR: $a = function(){..}
	$${1:var} = function (${2}) {

		${3:#...}

	};
#
# variavel function anonymous inherit
snippet function_ ANONYMOUS VAR USE(): $b = function() use(){...}
	$${1:var} = function (${2}) use (${3:inherit}) {

		${4:#...}

	};
# ###########################

# function 
snippet function
	function ${1}(${2})
	{

		${3:#...}

	}
#
#
# function anonymous
snippet functiona
	function (${1}) {

		${2:#...}

	}
#
#
# variavel function anonymous inherit
snippet functionau
	function (${2}) use (${3:inherit}) {

		${4:#...}

	}
#
#
#
# function anonymous
snippet functionav
	$${1:var} = function (${2}) {

		${3:#...}

	};
#
#
# variavel function anonymous inherit
snippet functionavu  
	$${1:var} = function (${2}) use (${3:inherit}) {

		${4:#...}

	};
#
#
#
#
snippet exit
	exit(${1});
# function	
snippet functione
	if (!function_exists('${1:nameFunction}')) {
		function $1(${2})
		{
			${3:#...}
		}
	}


# method
snippet method
	${1:public} function ${2:nameMethod}(${3})
	{
		${4:#...}
	} 
# attr
snippet vvar 
	var $${1:name};
#
snippet vpub
	public $${1:name};
#
snippet vpri
	private $${1:name};
#
snippet vpro
	protected $${1:name};
#
snippet p:
	parent::${1}
#
snippet s:
	self::${1}
#
snippet $t 
	$this->${1}
#	parent::_construct(); 
snippet p__
	parent::__construct(${1});
# [m]ethod _[c]onstruct
snippet m__
	${1:public} function __construct(${2})
	{
	    ${3:#...}
	}
# [m]ethod _[c]onstruct [p]arent
snippet m__p 
	${1:public} function __construct(${2})
	{
	    parent::__construct(${3});
	    ${4}
	}
# [m]ethod
snippet m
	${1:public} function ${2:nameMethod}(${3})
	{
	    ${4:#...}
	} 
# [m]ethod
snippet ms
	${1:public} static function ${2:nameMethod}(${3})
	{
	    ${4:#...}
	} 
#---------
# [m]ethod [i]nterface
snippet mi
	${1:public} function ${2:nameMethod}(${3});
# [m]ethod [a]bstract
snippet ma
	abstract ${1:protected} function ${2:nameMethod}(${3});
# [m]ethod [g]ets [s]ets	
snippet mgs
	public function get${1:Name}()
	{
	    return $this->${2:name};
	}


	public function set$1(${3:$$2})
	{
	    $this->$2 = ${4:$3};
	    return $this;
	}
# [m]ethod [get] [set]	
snippet mgetset
	public function get${1:Name}()
	{
	    return $this->${2:name};
	}


	public function set$1(${3:$$2})
	{
	    $this->$2 = ${4:$3};
	    return $this;
	}

# [m]ethod [get]
snippet mget
	public function get${1:Name}()
	{
	    return $this->${2:name};
	}
# [m]ethod [set]
snippet mset
	public function set${1:Name}(${2:$name})
	{
	    $this->${3:name} = $2;
	    return $this;
	}
#
# [n]ame[s]pace
snippet ns
	namespace ${1:Project};
# namespace
snippet ns2
	namespace ${1:Project}
	{
		${2}	
	}
#	
# use
snippet use
	use ${1:Project};
#
# ---------------------------------------------------
#
# the following are old ones
#
#
snippet inc
	include '${1:file}';
	${2}
#
snippet oinc
	include_once '${1:file}';
	${2}
#
snippet req
	require '${1:file}';
	${2}
#
snippet oreq
	require_once '${1:file}';
	${2}
#
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
#
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
#
snippet $_ GET['...']
	$_GET['${1:variable}']${2}
#
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
#
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
#
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
#
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
#
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
#
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
#
# define(...)
snippet def
	define('${1}', ${2});
# define(...)
snippet define
	define('${1}', ${2});
# defined(...)
snippet def?
	${1}defined('${2}')${3}
# defined(...)
snippet defined
	${1}defined('${2}')${3}
#
#
snippet phpfor
	<?php for ($${1:i} = ${2:0}; $$1 ${3:<} ${4:count}; $$1${5:++}) { ?>
	          ${6}
	<?php } ?>	
#
snippet phpforeach
	<?php foreach ($${1:list} as $${2:row}) { ?>
	          ${3}
	<?php } ?>
snippet phpwhile
	<php while (${1:true}) { ?>
	         ${2}
	<?php } ?>
#
snippet phpdo
	<?php do { ?>
	          ${2}
	<?php } while (${1:true}); ?>
#
snippet phpif
	<?php if (${1:true}) { ?>
		        ${2}
	<?php } ?>
#
snippet phpife
	<?php if (${1:true}) { ?>
		        ${2}
	<?php } else { ?>
		        ${3}
	<?php } ?>
#
snippet phpifelse
	<?php if (${1:true}) { ?>
		        ${2}
	<?php } else { ?>
		        ${3}
	<?php } ?>
#
# do ... while
snippet do
	do {
	    ${2}
	} while (${1:true});
#
snippet if
	if (${1:true}) {
	    ${2}
	}
#
snippet ife
	if (${1}) {
	    ${2}
	} else {
	    ${3}
	}
#
snippet ifelse
	if (${1}) {
	    ${2}
	} else {
	    ${3}
	}
#
snippet else
	else {
	    ${1}
	}
#
snippet elseif
	elseif (${1:true}) {
	    ${2}
	}
#
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:true}) ? ${3:a} : ${4:b};${5}
#
snippet switch
	switch ($${1:variable}) {
	    case ${2:value}:
	        ${3:// statement}
	        break;
	    default:
	        ${4:// statement}
	    break;
	}
#
snippet case
	case ${1:value}:
	    ${2:// statement}
	    break;${3}
#
snippet for
	for ($${1:i} = ${2:0}; $$1 ${3:<} ${4:count}; $$1${5:++}) {
		    ${6}
	}	
#
snippet foreach
	foreach ($${1:list} as $${2:row}) {
	    ${3}
	}
#
# while	
snippet while
	while (${1:true}) {
	    ${2}
	}
	
# array (...)
snippet arr
	 array(${1});
#
snippet kv
		${1:key} => ${2:value}
#
#
#
